name: Microservices CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout source
      uses: actions/checkout@v4

    # Step 2: Set up Java
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Step 3: Build & run unit tests for each service
    - name: Build & test services
      run: |
        mvn -B clean verify --file userService/pom.xml
        mvn -B clean verify --file hotelService/pom.xml
        mvn -B clean verify --file RatingService/pom.xml
        mvn -B clean verify --file ConfigServer/pom.xml
        mvn -B clean verify --file ApiGateway/pom.xml
        mvn -B clean verify --file serviceRegistry/pom.xml

    # Step 4: Set up Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Step 5: Docker Hub login
    - name: Docker Hub login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    # Step 6: Build Docker images
    - name: Build Docker images
      run: |
        docker build -t ${{ secrets.DOCKER_USER }}/user-service:latest userService
        docker build -t ${{ secrets.DOCKER_USER }}/hotel-service:latest hotelService
        docker build -t ${{ secrets.DOCKER_USER }}/rating-service:latest RatingService
        docker build -t ${{ secrets.DOCKER_USER }}/config-server:latest ConfigServer
        docker build -t ${{ secrets.DOCKER_USER }}/api-gateway:latest ApiGateway
        docker build -t ${{ secrets.DOCKER_USER }}/service-registry:latest serviceRegistry

    # Step 7: Push Docker images
    - name: Push Docker images
      run: |
        docker push ${{ secrets.DOCKER_USER }}/user-service:latest
        docker push ${{ secrets.DOCKER_USER }}/hotel-service:latest
        docker push ${{ secrets.DOCKER_USER }}/rating-service:latest
        docker push ${{ secrets.DOCKER_USER }}/config-server:latest
        docker push ${{ secrets.DOCKER_USER }}/api-gateway:latest
        docker push ${{ secrets.DOCKER_USER }}/service-registry:latest

    # Step 8: Set up kubectl
    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    # Step 9: Set up kubeconfig from secret
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config

    # Step 10: Replace <DOCKER_USER> in Kubernetes YAMLs
    - name: Replace <DOCKER_USER> in Kubernetes YAMLs
      run: |
        mkdir patched-k8s
        for file in k8s/*.yml; do
          sed "s|<DOCKER_USER>|${{ secrets.DOCKER_USER }}|g" "$file" > "patched-k8s/$(basename $file)"
        done

    # Step 11: Deploy to Kubernetes
    - name: Deploy to Kubernetes
      run: |
        for file in patched-k8s/*.yml; do
          kubectl apply -f "$file"
        done
